'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="activos_fijos")>  _
Partial Public Class UsersDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertempleado(instance As empleado)
    End Sub
  Partial Private Sub Updateempleado(instance As empleado)
    End Sub
  Partial Private Sub Deleteempleado(instance As empleado)
    End Sub
  Partial Private Sub Insertusuario(instance As usuario)
    End Sub
  Partial Private Sub Updateusuario(instance As usuario)
    End Sub
  Partial Private Sub Deleteusuario(instance As usuario)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("activos_fijosConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property empleado() As System.Data.Linq.Table(Of empleado)
		Get
			Return Me.GetTable(Of empleado)
		End Get
	End Property
	
	Public ReadOnly Property usuario() As System.Data.Linq.Table(Of usuario)
		Get
			Return Me.GetTable(Of usuario)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.empleado")>  _
Partial Public Class empleado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_empleado As Integer
	
	Private _nombre As String
	
	Private _direccion As String
	
	Private _email As String
	
	Private _puesto As String
	
	Private _telefono As String
	
	Private _id_perfiles As System.Nullable(Of Integer)
	
	Private _usuario As EntitySet(Of usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub OndireccionChanging(value As String)
    End Sub
    Partial Private Sub OndireccionChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnpuestoChanging(value As String)
    End Sub
    Partial Private Sub OnpuestoChanged()
    End Sub
    Partial Private Sub OntelefonoChanging(value As String)
    End Sub
    Partial Private Sub OntelefonoChanged()
    End Sub
    Partial Private Sub Onid_perfilesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_perfilesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usuario = New EntitySet(Of usuario)(AddressOf Me.attach_usuario, AddressOf Me.detach_usuario)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_empleado() As Integer
		Get
			Return Me._id_empleado
		End Get
		Set
			If ((Me._id_empleado = value)  _
						= false) Then
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(45)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion", DbType:="VarChar(45)")>  _
	Public Property direccion() As String
		Get
			Return Me._direccion
		End Get
		Set
			If (String.Equals(Me._direccion, value) = false) Then
				Me.OndireccionChanging(value)
				Me.SendPropertyChanging
				Me._direccion = value
				Me.SendPropertyChanged("direccion")
				Me.OndireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(45)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_puesto", DbType:="VarChar(45)")>  _
	Public Property puesto() As String
		Get
			Return Me._puesto
		End Get
		Set
			If (String.Equals(Me._puesto, value) = false) Then
				Me.OnpuestoChanging(value)
				Me.SendPropertyChanging
				Me._puesto = value
				Me.SendPropertyChanged("puesto")
				Me.OnpuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="VarChar(45)")>  _
	Public Property telefono() As String
		Get
			Return Me._telefono
		End Get
		Set
			If (String.Equals(Me._telefono, value) = false) Then
				Me.OntelefonoChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono")
				Me.OntelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_perfiles", DbType:="Int")>  _
	Public Property id_perfiles() As System.Nullable(Of Integer)
		Get
			Return Me._id_perfiles
		End Get
		Set
			If (Me._id_perfiles.Equals(value) = false) Then
				Me.Onid_perfilesChanging(value)
				Me.SendPropertyChanging
				Me._id_perfiles = value
				Me.SendPropertyChanged("id_perfiles")
				Me.Onid_perfilesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empleado_usuario", Storage:="_usuario", ThisKey:="id_empleado", OtherKey:="id_empleado")>  _
	Public Property usuario() As EntitySet(Of usuario)
		Get
			Return Me._usuario
		End Get
		Set
			Me._usuario.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usuario(ByVal entity As usuario)
		Me.SendPropertyChanging
		entity.empleado = Me
	End Sub
	
	Private Sub detach_usuario(ByVal entity As usuario)
		Me.SendPropertyChanging
		entity.empleado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuario")>  _
Partial Public Class usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_usuario As Integer
	
	Private _nombre_user As String
	
	Private _clave As String
	
	Private _id_empleado As System.Nullable(Of Integer)
	
	Private _empleado As EntityRef(Of empleado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_usuarioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_usuarioChanged()
    End Sub
    Partial Private Sub Onnombre_userChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_userChanged()
    End Sub
    Partial Private Sub OnclaveChanging(value As String)
    End Sub
    Partial Private Sub OnclaveChanged()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._empleado = CType(Nothing, EntityRef(Of empleado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_usuario() As Integer
		Get
			Return Me._id_usuario
		End Get
		Set
			If ((Me._id_usuario = value)  _
						= false) Then
				Me.Onid_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._id_usuario = value
				Me.SendPropertyChanged("id_usuario")
				Me.Onid_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_user", DbType:="VarChar(45)")>  _
	Public Property nombre_user() As String
		Get
			Return Me._nombre_user
		End Get
		Set
			If (String.Equals(Me._nombre_user, value) = false) Then
				Me.Onnombre_userChanging(value)
				Me.SendPropertyChanging
				Me._nombre_user = value
				Me.SendPropertyChanged("nombre_user")
				Me.Onnombre_userChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave", DbType:="VarChar(45)")>  _
	Public Property clave() As String
		Get
			Return Me._clave
		End Get
		Set
			If (String.Equals(Me._clave, value) = false) Then
				Me.OnclaveChanging(value)
				Me.SendPropertyChanging
				Me._clave = value
				Me.SendPropertyChanged("clave")
				Me.OnclaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", DbType:="Int")>  _
	Public Property id_empleado() As System.Nullable(Of Integer)
		Get
			Return Me._id_empleado
		End Get
		Set
			If (Me._id_empleado.Equals(value) = false) Then
				If Me._empleado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empleado_usuario", Storage:="_empleado", ThisKey:="id_empleado", OtherKey:="id_empleado", IsForeignKey:=true)>  _
	Public Property empleado() As empleado
		Get
			Return Me._empleado.Entity
		End Get
		Set
			Dim previousValue As empleado = Me._empleado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empleado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empleado.Entity = Nothing
					previousValue.usuario.Remove(Me)
				End If
				Me._empleado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuario.Add(Me)
					Me._id_empleado = value.id_empleado
				Else
					Me._id_empleado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empleado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
